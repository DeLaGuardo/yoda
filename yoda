#!/usr/bin/env bash
set -e
YODA_CMD='yoda'
YODA_VERSION='0.2-dev'
YODA_BIN=$(test -h $0 && readlink $0 || echo $0)
YODA_PATH=${YODA_BIN%/*}

if (( ${BASH_VERSION//[!0-9]/} < 4 )); then
  echo "You need version of BASH >= 4. Current: $BASH_VERSION. Please update it." && exit 1
fi

if [[ -z "$1" ]]; then
  echo "No command specified. Run '$YODA_CMD command'. '$YODA_CMD help' for more info." && exit 1
fi
cmd=$1
shift

# Auto version switch and update
source_yoda_version=$YODA_VERSION
# shellcheck source=docker/.yodarc
test -e docker/.yodarc && source $_
if [[ "$source_yoda_version" != "$YODA_VERSION" ]]; then
  (
    set +e
    echo "Current Yoda version: '$source_yoda_version'."
    echo "Switching to project Yoda version: '$YODA_VERSION'."
    cd $YODA_PATH
    git fetch
    git pull --rebase origin master
    git checkout $YODA_VERSION
    switched_version=$(cat $YODA_BIN | grep "YODA_VERSION=$YODA_VERSION")
    if [[ "$switched_version" == "$YODA_VERSION" ]]; then
      exec $YODA_BIN $cmd "$*"
    else
      echo "Failed to switch version to '$YODA_VERSION'. Using '$source_yoda_version'."
    fi
  )2> /dev/null
fi

# shellcheck source=docker/env.sh
test -e docker/env.sh && source $_

for p in "$@"; do
  case $p in
    *)
      ;;
  esac
done

# Use custom start layout if there is start file
custom_run() {
  script=$1
  shift
  echo "Custom run: $DOCKER_ROOT/$script"
  if [[ -e $DOCKER_ROOT/$script && ! -x $DOCKER_ROOT/$script ]]; then
    echo "$DOCKER_ROOT/$script is found but its not executable. Run 'chmod +x $DOCKER_ROOT/$script' to make it work."
    return 1
  fi

  if [[ -x $DOCKER_ROOT/$script ]]; then
    exec $DOCKER_ROOT/$script "$*"
    exit 0
  fi
}

allow_dev_only() {
  if [[ $ENV != 'dev' ]]; then
    echo "Your environment: $ENV. This command is allowed only in 'dev' environment."
    return 1
  fi
}

case "$cmd" in
  init)
    if [[ -e docker ]]; then
      echo "Error while initializing Yoda. Folder 'docker' already exists."
      if [[ -f docker/.yodarc ]]; then
        source docker/.yodarc
        echo "Initialized Yoda version: $YODA_VERSION"
      fi
      exit 1
    fi

    project_name=${arg_name:-"${PWD##*/}"}
    username=$(git config --global user.name || echo 'Unknown maintainer')
    useremail=$(git config --global user.email || echo 'noreply@yoda.org')

    touch .dockerignore
    mkdir -p docker/{templates,images,containers}
    cp $YODA_PATH/templates/env.sh docker
    cp $YODA_PATH/templates/Envfile docker
    cp $YODA_PATH/templates/Buildfile docker/images
    sed "s/%user%/$username/g;s/%email%/$useremail/g;" $YODA_PATH/templates/Dockerfile > docker/images/Dockerfile-base
    cp $YODA_PATH/templates/gitignore docker/.gitignore
    cp $YODA_PATH/templates/dockerignore docker/.dockerignore
    sed "s/%name%/$project_name/g;s/%yoda_version%/$YODA_VERSION/g" $YODA_PATH/templates/yodarc > docker/.yodarc
    ;;

  add|delete)
    allow_dev_only
    arg_name="$*"
    if [[ -z "$arg_name" ]]; then
      echo "Did you mean '$YODA_CMD container'? '$YODA_CMD help' for more info." && exit 1
    fi

    for name in $arg_name; do
      container_path="docker/containers/$name"
      if [[ $cmd == add ]]; then
        if [[ -d $container_path ]]; then
          echo "Container exists: '$name'. Skipping: '$container_path'."
          continue
        fi
        mkdir -p $container_path
        sed "s/%name%/$name/g" $YODA_PATH/templates/container.yml > $container_path/container.yml
        cp $YODA_PATH/templates/entrypoint $container_path
        sed "s/^dev\:\(.*\)/dev\:\1 $name/" docker/Envfile > docker/.Envfile.swp && mv docker/.Envfile.swp $_
      else
        test -d $container_path && rm -fr $_
        echo "s/[!^]\s*$name//"
        sed "s/ $name/ /" docker/Envfile > docker/.Envfile.swp && mv docker/.Envfile.swp $_
      fi
    done
    ;;

  compose)
    arg_composer="$*"
    custom_run compose
    # Get containers to build
    containers=$(cat docker/Envfile | grep ^$ENV: | cut -d ':' -f2)
    COMPOSE_SCRIPT=$arg_composer bash "$YODA_PATH/compose.sh" $containers
    ;;

  build)
    custom_run build
    bash "$YODA_PATH/build.sh"
    ;;

  start)
    custom_run start "$*"
    $0 compose > $COMPOSE_FILE
    $0 build
    docker-compose up --no-build --remove-orphans -t $STOP_WAIT_TIMEOUT -d "$*"
    ;;

  stop)
    custom_run stop "$*"
    docker-compose stop -t $STOP_WAIT_TIMEOUT "$*"
    ;;

  deploy)
    if [[ -z "$GIT_URL" ]]; then
      echo "GIT_URL is empty. Are you sure you are in git repository?"
      exit 1
    fi

    custom_run deploy "$*"
    bash "$YODA_PATH/deploy.sh" "$*"
    ;;

  help)
    YODA_CMD=$YODA_CMD bash "$YODA_PATH/help.sh"
    ;;

  version)
    echo "Yoda version: $YODA_VERSION"
    ;;

  *)
    echo "Unknown command '$cmd'"
    echo "Run '$YODA_CMD help' to see more info"
    ;;
esac
