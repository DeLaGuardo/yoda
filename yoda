#!/usr/bin/env bash
set -e
YODA_CMD='yoda'
YODA_SOURCE_VERSION='1.0'
# YODA_VERSION redefined when you are in project dir
YODA_VERSION=$YODA_SOURCE_VERSION
YODA_BIN=$(test -h $0 && readlink $0 || echo $0)
YODA_PATH=${YODA_BIN%/*}

# Forbid to run as root
if [[ "$(id -u)" -eq 0 ]]; then
  >&2 echo "You are not allowed to run Yoda as root."
  exit 1
fi

if [[ -z "$1" ]]; then
  >&2 echo "No command specified. Run '$YODA_CMD command'. '$YODA_CMD help' for more info." && exit 1
fi
cmd=$1
shift

# Auto version switch and update
yodarc_file=$(ls */.yodarc 2>/dev/null || true)
if [[ -n "$yodarc_file" ]]; then
  # shellcheck source=yoda/.yodarc
  source $yodarc_file
fi

if [[ "$YODA_SOURCE_VERSION" != "$YODA_VERSION" && $cmd != upgrade ]]; then
  (
    set +e
    echo "Current Yoda version: '$YODA_SOURCE_VERSION'."
    echo "Switching to project Yoda version: '$YODA_VERSION'."
    cd $YODA_PATH
    git fetch
    git pull --rebase origin master
    git checkout $YODA_VERSION
    switched_version=$(cat $YODA_BIN | grep "YODA_VERSION=$YODA_VERSION")
    if [[ "$switched_version" == "$YODA_VERSION" ]]; then
      exec $YODA_BIN $cmd "$*"
    else
      >&2 echo "Failed to switch version to '$YODA_VERSION'. Using '$YODA_SOURCE_VERSION'."
    fi
  )2> /dev/null
fi

# shellcheck source=docker/env.sh
test -e $DOCKER_ROOT/env.sh && source $_

for p in "$@"; do
  case $p in
    *)
      ;;
  esac
done

# Use custom start layout if there is start file
custom_run() {
  script=$1
  shift

  # Stop recursion here get parent caller
  called_by=$(ps -f -p $PPID | tail -1 | awk '{print $NF}')
  if [[ "$called_by" == *"$script" ]]; then
    return 0
  fi

  if [[ -e $DOCKER_ROOT/$script && ! -x $DOCKER_ROOT/$script ]]; then
    >&2 echo "$DOCKER_ROOT/$script is found but its not executable. Run 'chmod +x $DOCKER_ROOT/$script' to make it work."
    return 1
  fi

  if [[ -x $DOCKER_ROOT/$script ]]; then
    echo "Custom run: $DOCKER_ROOT/$script"
    exec $DOCKER_ROOT/$script "$*"
    exit 0
  fi
}

allow_dev_only() {
  if [[ $ENV != 'dev' ]]; then
    >&2 echo "Your environment: $ENV. This command is allowed only in 'dev' environment."
    return 1
  fi
}

check_yodarc() {
  if [[ ! -f $DOCKER_ROOT/.yodarc ]]; then
    >&2 echo "Yoda is not inited. Run '$YODA_CMD init' first. More info: '$YODA_CMD help'."
    return 1
  fi
}

case "$cmd" in
  init)
    arg_dir="$*"

    if [[ -f $DOCKER_ROOT/.yodarc ]]; then
      # shellcheck source=yoda/.yodarc
      source $DOCKER_ROOT/.yodarc
      >&2 echo "Yoda was initialized already. Yoda version: '$YODA_VERSION'. Yoda home path: '$DOCKER_ROOT'."
      exit 1
    fi

    yoda_dir=${arg_dir:-docker}
    if [[ -e $yoda_dir ]]; then
      >&2 echo "Error while initializing Yoda. Folder '$yoda_dir' already exists."
      exit 1
    fi

    project_name=${arg_name:-"${PWD##*/}"}
    username=$(git config --global user.name || echo 'Unknown maintainer')
    useremail=$(git config --global user.email || echo 'noreply@yoda.org')

    touch .dockerignore
    mkdir -p $yoda_dir/{images,containers}
    cp $YODA_PATH/templates/env.sh $yoda_dir
    cp $YODA_PATH/templates/{Env,Build}file $yoda_dir
    sed "s/%user%/$username/g;s/%email%/$useremail/g;" $YODA_PATH/templates/Dockerfile > $yoda_dir/images/Dockerfile-base
    cp $YODA_PATH/templates/gitignore $yoda_dir/.gitignore
    cp $YODA_PATH/templates/dockerignore $yoda_dir/.dockerignore
    sed "s/%name%/$project_name/g;s/%yoda_version%/$YODA_VERSION/g" $YODA_PATH/templates/yodarc > $yoda_dir/.yodarc
    ;;

  upgrade)
    check_yodarc
    allow_dev_only
    bash "$YODA_PATH/src/upgrade.sh" "$YODA_PATH/upgrades"
    ;;

  add|delete)
    check_yodarc
    allow_dev_only
    arg_name="$*"
    if [[ -z "$arg_name" ]]; then
      >&2 echo "Did you mean '$YODA_CMD $cmd container'? '$YODA_CMD help' for more info."
      exit 1
    fi

    for name in $arg_name; do
      container_path="$DOCKER_ROOT/containers/$name"
      if [[ $cmd == add ]]; then
        if [[ -d $container_path ]]; then
          echo "Container exists: '$name'. Skipping: '$container_path'."
          continue
        fi
        mkdir -p $container_path
        sed "s/%name%/$name/g" $YODA_PATH/templates/container.yml > $container_path/container.yml
        cp $YODA_PATH/templates/entrypoint $container_path
        sed "s/^dev\:\(.*\)/dev\:\1 $name/" $DOCKER_ROOT/Envfile > $DOCKER_ROOT/.Envfile.swp && mv $DOCKER_ROOT/.Envfile.swp $_
      else
        test -d $container_path && rm -fr $_
        sed "s/ $name/ /" $DOCKER_ROOT/Envfile > $DOCKER_ROOT/.Envfile.swp && mv $DOCKER_ROOT/.Envfile.swp $_
      fi
    done
    ;;

  compose)
    check_yodarc
    arg_composer="$*"
    custom_run compose
    # Get containers to build
    containers=$(cat $DOCKER_ROOT/Envfile | grep ^$ENV: | cut -d ':' -f2)
    COMPOSE_SCRIPT=$arg_composer bash "$YODA_PATH/src/compose.sh" $containers
    ;;

  build)
    check_yodarc
    custom_run build
    bash "$YODA_PATH/src/build.sh" "$*"
    ;;

  start)
    check_yodarc
    custom_run start "$*"
    YODA_CMD=$YODA_CMD bash "$YODA_PATH/src/start.sh" "$*"
    ;;

  stop)
    check_yodarc
    custom_run stop "$*"
    bash "$YODA_PATH/src/stop.sh" "$*"
    ;;

  status)
    check_yodarc
    docker-compose ps
    ;;

  deploy)
    check_yodarc
    if [[ -z "$GIT_URL" ]]; then
      >&2 echo "GIT_URL is empty. Are you sure you are in git repository?"
      exit 1
    fi

    custom_run deploy "$*"
    bash "$YODA_PATH/src/deploy.sh" "$*"
    ;;

  help)
    YODA_CMD=$YODA_CMD bash "$YODA_PATH/src/help.sh"
    ;;

  version)
    echo "Yoda version: $YODA_VERSION"
    ;;

  *)
    >&2 echo "Unknown command '$cmd'"
    >&2 echo "Run '$YODA_CMD help' to see more info"
    ;;
esac
