#!/usr/bin/env bash
set -e
YODA_CMD='yoda'
YODA_VERSION='0.1-dev'
if [[ -z "$1" ]]; then
  echo "No command specified. Run '$YODA_CMD command'. '$YODA_CMD help' for more info." && exit 1
fi
cmd=$1
shift

# shellcheck source=docker/.yodarc
test -e docker/.yodarc && source $_

# shellcheck source=docker/env.sh
test -e docker/env.sh && source $_

for p in "$@"; do
  case $p in
    --name=*)
      arg_name=${p##*=}
      ;;
    *)
      ;;
  esac
done

# Use custom start layout if there is start file
custom_run() {
  script=$1
  shift
  if [[ -e $DOCKER_ROOT/$script && ! -x $DOCKER_ROOT/$script ]]; then
    echo "$DOCKER_ROOT/$script is found but its not executable. Run 'chmod +x $DOCKER_ROOT/$script' to make it work."
    return 1
  fi

  if [[ -x $DOCKER_ROOT/$script ]]; then
    exec $DOCKER_ROOT/$script "$*"
    exit 0
  fi
}

case "$cmd" in
  init)
    project_name=${arg_name:-$(basename `pwd`)}
    username=$(git config --global user.name || echo 'Unknown maintainer')
    useremail=$(git config --global user.email || echo 'noreply@yoda.org')

    touch .dockerignore
    mkdir -p docker/{templates,images,containers,configs,scripts}
    cp "$(dirname $0)"/templates/env.sh docker
    cp "$(dirname $0)"/templates/cluster.yml docker
    cp "$(dirname $0)"/templates/Buildfile docker/images
    sed "s/%user%/$username/g;s/%email%/$useremail/g;" "$(dirname $0)"/templates/Dockerfile > docker/images/Dockerfile-base
    cp "$(dirname $0)"/templates/gitignore docker/.gitignore
    sed "s/%name%/$project_name/g;s/%yoda_version%/$YODA_VERSION/g" "$(dirname $0)"/templates/yodarc > docker/.yodarc
    ;;

  add)
    if [[ -z "$arg_name" ]]; then
      echo "Did you mean '$YODA_CMD --name=container'? '$YODA_CMD help' for more info." && exit 1
    fi
    container_path="docker/containers/$arg_name"
    mkdir -p $container_path
    sed "s/%name%/$arg_name/g" "$(dirname $0)"/templates/container.yml > $container_path/container.yml
    cp "$(dirname $0)"/templates/entrypoint $container_path
    ;;

  compose)
    custom_run compose
    # Get containers to build
    containers=$(cat docker/cluster.yml | grep ^$ENV: | cut -d ':' -f2)
    bash "$(dirname $0)/compose.sh" $containers
    ;;

  build)
    custom_run build
    bash "$(dirname $0)/build.sh"
    ;;

  start)
    custom_run start "$*"
    $0 compose > $COMPOSE_FILE
    $0 build
    docker-compose up --no-build --remove-orphans -t $STOP_WAIT_TIMEOUT -d "$*"
    ;;

  stop)
    custom_run stop "$*"
    docker-compose stop -t $STOP_WAIT_TIMEOUT "$*"
    ;;


  help)
    echo "Usage: $YODA_CMD command arguments"
    echo
    echo "Commands available:"
    echo "  version   Display version of Yoda"
    echo "  help      Display this information"
    echo "  init      Prepare deployment folder in project"
    echo "  add       Add new container skeleton structure to project"
    echo "  build     Build images for current project"
    echo "  compose   Display generated compose file for current environment"
    echo "  start     Start all services for current project"
    echo "  stop      Stop all services for current project"
    echo
    echo "Usage:"
    echo "  $YODA_CMD version"
    echo "    Display current Yoda version"
    echo
    echo "  $YODA_CMD help"
    echo "    Display help information"
    echo
    echo "  $YODA_CMD init"
    echo "    Prepare dockerized skeleton in project directory"
    echo
    echo "  $YODA_CMD add [options]"
    echo "    Add container skeleton to project"
    echo
    echo "    Options are:"
    echo "      --name=container â€“ name of container (required)"
    echo
    echo "  $YODA_CMD build"
    echo "    Build images for current project"
    echo
    echo "  $YODA_CMD compose"
    echo "    Display generated docker-compose file in stdout"
    echo
    echo "  $YODA_CMD start [CONTAINER...]"
    echo "    Start all containers or only passed with arguments"
    echo
    echo "  $YODA_CMD stop [CONTAINER...]"
    echo "    Stop all containers or only passed with arguments"
    ;;

  version)
    echo "Yoda version: $YODA_VERSION"
    ;;

  *)
    echo "Unknown command '$cmd'"
    echo "Run '$YODA_CMD help' to see more info"
    ;;
esac
